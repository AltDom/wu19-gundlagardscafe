{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/Dominic/Documents/Yrgo/Projects/wu19-gundlagardscafe/web/pages/[slug].js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"*[_type == \\\"page\\\" && slug.current == $slug][0]\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n// [slug].js\nimport groq from 'groq';\nimport imageUrlBuilder from '@sanity/image-url';\nimport BlockContent from '@sanity/block-content-to-react';\nimport client from '../../client';\n\nfunction urlFor(source) {\n  return imageUrlBuilder(client).image(source);\n}\n\nvar Page = function Page(props) {\n  var _props$title = props.title,\n      title = _props$title === void 0 ? 'Missing title' : _props$title,\n      heroImage = props.heroImage,\n      _props$heroText = props.heroText,\n      heroText = _props$heroText === void 0 ? '' : _props$heroText,\n      _props$body = props.body,\n      body = _props$body === void 0 ? [] : _props$body;\n  return __jsx(\"article\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, console.log(props), __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, title), __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, \"By \", name), categories && __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, \"Posted in\", categories.map(function (category) {\n    return __jsx(\"li\", {\n      key: category,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }\n    }, category);\n  })), authorImage && __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, __jsx(\"img\", {\n    src: urlFor(authorImage).width(50).url(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }\n  })), __jsx(BlockContent, _extends({\n    blocks: body,\n    imageOptions: {\n      w: 320,\n      h: 240,\n      fit: 'max'\n    }\n  }, client.config(), {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  })));\n};\n\n_c = Page;\nvar query = groq(_templateObject());\n\nPage.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var _context$query$slug, slug;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // It's important to default the slug so that it doesn't return \"undefined\"\n            _context$query$slug = context.query.slug, slug = _context$query$slug === void 0 ? '' : _context$query$slug;\n            _context.next = 3;\n            return client.fetch(query, {\n              slug: slug\n            });\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default Page;\n\nvar _c;\n\n$RefreshReg$(_c, \"Page\");","map":{"version":3,"sources":["/Users/Dominic/Documents/Yrgo/Projects/wu19-gundlagardscafe/web/pages/[slug].js"],"names":["groq","imageUrlBuilder","BlockContent","client","urlFor","source","image","Page","props","title","heroImage","heroText","body","console","log","name","categories","map","category","authorImage","width","url","w","h","fit","config","query","getInitialProps","context","slug","fetch"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,MAAP,MAAmB,cAAnB;;AAEA,SAASC,MAAT,CAAgBC,MAAhB,EAAwB;AACtB,SAAOJ,eAAe,CAACE,MAAD,CAAf,CAAwBG,KAAxB,CAA8BD,MAA9B,CAAP;AACD;;AAED,IAAME,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD,EAAW;AAAA,qBACmDA,KADnD,CACdC,KADc;AAAA,MACdA,KADc,6BACN,eADM;AAAA,MACWC,SADX,GACmDF,KADnD,CACWE,SADX;AAAA,wBACmDF,KADnD,CACsBG,QADtB;AAAA,MACsBA,QADtB,gCACiC,EADjC;AAAA,oBACmDH,KADnD,CACqCI,IADrC;AAAA,MACqCA,IADrC,4BAC4C,EAD5C;AAEtB,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,OAAO,CAACC,GAAR,CAAYN,KAAZ,CADH,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKC,KAAL,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAUM,IAAV,CAHF,EAIGC,UAAU,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEGA,UAAU,CAACC,GAAX,CAAe,UAACC,QAAD;AAAA,WACd;AAAI,MAAA,GAAG,EAAEA,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoBA,QAApB,CADc;AAAA,GAAf,CAFH,CALJ,EAYGC,WAAW,IACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,GAAG,EAAEf,MAAM,CAACe,WAAD,CAAN,CAAoBC,KAApB,CAA0B,EAA1B,EAA8BC,GAA9B,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAbJ,EAiBE,MAAC,YAAD;AACE,IAAA,MAAM,EAAET,IADV;AAEE,IAAA,YAAY,EAAE;AAAEU,MAAAA,CAAC,EAAE,GAAL;AAAUC,MAAAA,CAAC,EAAE,GAAb;AAAkBC,MAAAA,GAAG,EAAE;AAAvB;AAFhB,KAGMrB,MAAM,CAACsB,MAAP,EAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjBF,CADF;AAyBD,CA3BD;;KAAMlB,I;AA6BN,IAAMmB,KAAK,GAAG1B,IAAH,mBAAX;;AAEAO,IAAI,CAACoB,eAAL;AAAA,sEAAuB,iBAAgBC,OAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACrB;AADqB,kCAECA,OAAO,CAACF,KAFT,CAEbG,IAFa,EAEbA,IAFa,oCAEN,EAFM;AAAA;AAAA,mBAGR1B,MAAM,CAAC2B,KAAP,CAAaJ,KAAb,EAAoB;AAAEG,cAAAA,IAAI,EAAJA;AAAF,aAApB,CAHQ;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;AAMA,eAAetB,IAAf","sourcesContent":["// [slug].js\nimport groq from 'groq';\nimport imageUrlBuilder from '@sanity/image-url';\nimport BlockContent from '@sanity/block-content-to-react';\nimport client from '../../client';\n\nfunction urlFor(source) {\n  return imageUrlBuilder(client).image(source);\n}\n\nconst Page = (props) => {\n  const { title = 'Missing title', heroImage, heroText = '', body = [] } = props;\n  return (\n    <article>\n      {console.log(props)}\n      <h1>{title}</h1>\n      <span>By {name}</span>\n      {categories && (\n        <ul>\n          Posted in\n          {categories.map((category) => (\n            <li key={category}>{category}</li>\n          ))}\n        </ul>\n      )}\n      {authorImage && (\n        <div>\n          <img src={urlFor(authorImage).width(50).url()} />\n        </div>\n      )}\n      <BlockContent\n        blocks={body}\n        imageOptions={{ w: 320, h: 240, fit: 'max' }}\n        {...client.config()}\n      />\n    </article>\n  );\n};\n\nconst query = groq`*[_type == \"page\" && slug.current == $slug][0]`;\n\nPage.getInitialProps = async function (context) {\n  // It's important to default the slug so that it doesn't return \"undefined\"\n  const { slug = '' } = context.query;\n  return await client.fetch(query, { slug });\n};\n\nexport default Page;\n"]},"metadata":{},"sourceType":"module"}