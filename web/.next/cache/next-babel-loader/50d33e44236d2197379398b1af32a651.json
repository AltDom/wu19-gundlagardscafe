{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n// [slug].js\nimport groq from 'groq';\nimport imageUrlBuilder from '@sanity/image-url';\nimport BlockContent from '@sanity/block-content-to-react';\nimport client from '../../client';\n\nfunction urlFor(source) {\n  return imageUrlBuilder(client).image(source);\n}\n\nconst Page = props => {\n  const {\n    title = 'Missing title',\n    name = 'Missing name',\n    heroImage,\n    heroText = '',\n    body = []\n  } = props;\n  return __jsx(\"article\", null, __jsx(\"h1\", null, title), __jsx(\"span\", null, \"By \", name), categories && __jsx(\"ul\", null, \"Posted in\", categories.map(category => __jsx(\"li\", {\n    key: category\n  }, category))), authorImage && __jsx(\"div\", null, __jsx(\"img\", {\n    src: urlFor(authorImage).width(50).url()\n  })), __jsx(BlockContent, _extends({\n    blocks: body,\n    imageOptions: {\n      w: 320,\n      h: 240,\n      fit: 'max'\n    }\n  }, client.config())));\n};\n\nconst query = groq`*[_type == \"page\" && slug.current == $slug][0]`;\n\nPage.getInitialProps = async function (context) {\n  // It's important to default the slug so that it doesn't return \"undefined\"\n  const {\n    slug = ''\n  } = context.query;\n  return await client.fetch(query, {\n    slug\n  });\n};\n\nexport default Page;","map":null,"metadata":{},"sourceType":"module"}