{"ast":null,"code":"var _jsxFileName = \"/Users/Dominic/Documents/Yrgo/Projects/wu19-gundlagardscafe/web/pages/[slug].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n// [slug].js\nimport groq from 'groq';\nimport imageUrlBuilder from '@sanity/image-url';\nimport BlockContent from '@sanity/block-content-to-react';\nimport client from '../client';\n\nfunction urlFor(source) {\n  return imageUrlBuilder(client).image(source);\n}\n\nconst Page = props => {\n  const {\n    title = 'Missing title',\n    heroImage,\n    heroText = '',\n    body = []\n  } = props;\n  return __jsx(\"article\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, console.log(props), __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, title), authorImage && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, __jsx(\"img\", {\n    src: urlFor(authorImage).width(50).url(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }\n  })), __jsx(BlockContent, _extends({\n    blocks: body,\n    imageOptions: {\n      w: 320,\n      h: 240,\n      fit: 'max'\n    }\n  }, client.config(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  })));\n};\n\nconst query = groq`*[_type == \"page\" && slug.current == $slug][0]`;\n\nPage.getInitialProps = async function (context) {\n  // It's important to default the slug so that it doesn't return \"undefined\"\n  const {\n    slug = ''\n  } = context.query;\n  return await client.fetch(query, {\n    slug\n  });\n};\n\nexport default Page;","map":{"version":3,"sources":["/Users/Dominic/Documents/Yrgo/Projects/wu19-gundlagardscafe/web/pages/[slug].js"],"names":["groq","imageUrlBuilder","BlockContent","client","urlFor","source","image","Page","props","title","heroImage","heroText","body","console","log","authorImage","width","url","w","h","fit","config","query","getInitialProps","context","slug","fetch"],"mappings":";;;;;;AAAA;AACA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,SAASC,MAAT,CAAgBC,MAAhB,EAAwB;AACtB,SAAOJ,eAAe,CAACE,MAAD,CAAf,CAAwBG,KAAxB,CAA8BD,MAA9B,CAAP;AACD;;AAED,MAAME,IAAI,GAAIC,KAAD,IAAW;AACtB,QAAM;AAAEC,IAAAA,KAAK,GAAG,eAAV;AAA2BC,IAAAA,SAA3B;AAAsCC,IAAAA,QAAQ,GAAG,EAAjD;AAAqDC,IAAAA,IAAI,GAAG;AAA5D,MAAmEJ,KAAzE;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGK,OAAO,CAACC,GAAR,CAAYN,KAAZ,CADH,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKC,KAAL,CAFF,EAYGM,WAAW,IACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,GAAG,EAAEX,MAAM,CAACW,WAAD,CAAN,CAAoBC,KAApB,CAA0B,EAA1B,EAA8BC,GAA9B,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAbJ,EAiBE,MAAC,YAAD;AACE,IAAA,MAAM,EAAEL,IADV;AAEE,IAAA,YAAY,EAAE;AAAEM,MAAAA,CAAC,EAAE,GAAL;AAAUC,MAAAA,CAAC,EAAE,GAAb;AAAkBC,MAAAA,GAAG,EAAE;AAAvB;AAFhB,KAGMjB,MAAM,CAACkB,MAAP,EAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjBF,CADF;AAyBD,CA3BD;;AA6BA,MAAMC,KAAK,GAAGtB,IAAK,gDAAnB;;AAEAO,IAAI,CAACgB,eAAL,GAAuB,gBAAgBC,OAAhB,EAAyB;AAC9C;AACA,QAAM;AAAEC,IAAAA,IAAI,GAAG;AAAT,MAAgBD,OAAO,CAACF,KAA9B;AACA,SAAO,MAAMnB,MAAM,CAACuB,KAAP,CAAaJ,KAAb,EAAoB;AAAEG,IAAAA;AAAF,GAApB,CAAb;AACD,CAJD;;AAMA,eAAelB,IAAf","sourcesContent":["// [slug].js\nimport groq from 'groq';\nimport imageUrlBuilder from '@sanity/image-url';\nimport BlockContent from '@sanity/block-content-to-react';\nimport client from '../client';\n\nfunction urlFor(source) {\n  return imageUrlBuilder(client).image(source);\n}\n\nconst Page = (props) => {\n  const { title = 'Missing title', heroImage, heroText = '', body = [] } = props;\n  return (\n    <article>\n      {console.log(props)}\n      <h1>{title}</h1>\n      {/* <span>By {name}</span> */}\n      {/* {categories && (\n        <ul>\n          Posted in\n          {categories.map((category) => (\n            <li key={category}>{category}</li>\n          ))}\n        </ul>\n      )} */}\n      {authorImage && (\n        <div>\n          <img src={urlFor(authorImage).width(50).url()} />\n        </div>\n      )}\n      <BlockContent\n        blocks={body}\n        imageOptions={{ w: 320, h: 240, fit: 'max' }}\n        {...client.config()}\n      />\n    </article>\n  );\n};\n\nconst query = groq`*[_type == \"page\" && slug.current == $slug][0]`;\n\nPage.getInitialProps = async function (context) {\n  // It's important to default the slug so that it doesn't return \"undefined\"\n  const { slug = '' } = context.query;\n  return await client.fetch(query, { slug });\n};\n\nexport default Page;\n"]},"metadata":{},"sourceType":"module"}